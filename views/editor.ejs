<h1 class="mt-4">Shader Editor</h1>
<p class="lead mb-3" style="font-size: 1.6em;">Welcome <%= user.name %>! Play with the sliders to change shader variables</p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pixi.js/5.1.3/pixi.min.js"></script>
<div class="pixi-shaders">

    <div class="row" style="display: flex;">
      
      <div class="shader column" style="flex: 50%;">
        <form action="/editor/save" method="POST">
          <input class="slider red" type="range" name="red" min="0" max="1" step="0.1" style="width: 100px">
          <label for="red" style="color: red">Red</label>
          <br>
          <input class="slider green" type="range" name="green" min="0" max="1" step="0.1">
          <label for="green" style="color: green">Green</label>
          <br>
          <input class="slider blue" type="range" name="blue" min="0" max="1" step="0.1">
          <label for="blue" style="color: blue">Blue</label>
          <br>
          <input class="slider sin" type="range" name="sin" min="0" max="1" step="0.1" value="0">
          <label for="sin" style="color: white">Sin</label>
          <br>
          <input class="slider tan" type="range" name="tan" min="0" max="1" step="0.1" value="0">
          <label for="tan" style="color: yellow">Tan</label>
          <br>
          <input class="slider abs" type="range" name="abs" min="0" max="1" step="0.1">
          <label for="abs" style="color: cyan">Absolute</label>
          <br>
          <input class="slider freq" type="range" name="freq" min="1" max="5" step="1">
          <label for="freq" style="color: purple">Frequency</label>
          <br>
          <input type="name" id="name" name="name" class="form-control" value="Shader name"/>
          <br>
          <button type="submit" class="btn btn-primary btn-block">Save shader</button>
        </form>
        <br>
        <table class="table-dark" style="border: 3px solid #ffffff;">
          <thead>
              <tr>
                <th style="border: 3px solid #ffffff;">Shaders</th>
                <th style="border: 3px solid #ffffff;">Red</th>
                <th style="border: 3px solid #ffffff;">Green</th>
                <th style="border: 3px solid #ffffff;">Blue</th>
                <th style="border: 3px solid #ffffff;">Sin</th>
                <th style="border: 3px solid #ffffff;">Tan</th>
                <th style="border: 3px solid #ffffff;">Absolute</th>
                <th style="border: 3px solid #ffffff;">Frequency</th>
              </tr>
          </thead>
          <tbody >
              <%user.shaders.forEach( shader => {%>
            
            <tr style="border: 3px solid #ffffff;">
              <td class="name" style="border: 3px solid #ffffff;"><%=shader.name%></td>
              <td class="red" style="border: 3px solid #ffffff;"><%=shader.red%></td>
              <td class="green" style="border: 3px solid #ffffff;"><%=shader.green%></td>
              <td class="blue" style="border: 3px solid #ffffff;"><%=shader.blue%></td>
              <td class="sin" style="border: 3px solid #ffffff;"><%=shader.sin%></td>
              <td class="tan" style="border: 3px solid #ffffff;"><%=shader.tan%></td>
              <td class="abs" style="border: 3px solid #ffffff;"><%=shader.abs%></td>
              <td class="freq" style="border: 3px solid #ffffff;"><%=shader.freq%></td>
              <td style="border: 3px solid #ffffff;">
                <form id="delete" action="/editor/delete/<%= shader.name %>" method="POST">
                  <button type="submit" class="btn btn-primary btn-block">Delete</button>
                </form> 
              </td>
            </tr>
          <%});%>
          </tbody>
        </table>
        
      </div>
      
      <div class="column" style="flex: 50%; ">
        <canvas id="pixi" style="margin-left: 60px"></canvas>
        <script type="text/javascript">
          const pixiCanvas = document.getElementById('pixi');
          const sliders = document.querySelectorAll('.slider');


          const app = new PIXI.Application({
              view: pixiCanvas,
              width: 500,
              height: 500
          });

          const renderer = new PIXI.Renderer({});

          let vShader = `
                  attribute vec2 aVertexPosition;
                  attribute vec2 aTextureCoord;

                  uniform mat3 projectionMatrix;
                  varying vec2 vTextureCoord;

                  void main(void){
                      gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
                      vTextureCoord = aTextureCoord;
                  }`;
          let fShader = `
                  varying vec2 vTextureCoord;
                  uniform sampler2D uSampler;
                  uniform float uTime;
                  uniform float redSlider;
                  uniform float greenSlider;
                  uniform float blueSlider;
                  uniform float sinSlider;
                  uniform float tanSlider;
                  uniform float absSlider;
                  uniform float freqSlider;



                  void main(void){
                      vec4 color = texture2D(uSampler, vTextureCoord);
                      float waveX = sin(uTime + (vTextureCoord.x * 3.0)) - sinSlider;
                      float waveY = tan(uTime + (vTextureCoord.y * 3.0));

                      if(color.b > 0.9 && tanSlider > 0.0){
                        
                        color = vec4(vec3(waveY), tan(uTime + tanSlider));
                      }
                      
                      if(color.b > 0.9 && sinSlider > 0.0){
                        
                        color = vec4(vec3(waveX), 1);
                      }
                      

                      if(absSlider > 0.0){
                              color.r = abs(color.r) / absSlider;
                              color.g = abs(color.g) / absSlider;
                              color.b = abs(color.b) / absSlider;
                          }
                      color.r = color.r * redSlider;
                      color.g = color.g * greenSlider;
                      color.b = color.b * blueSlider;
                      
                      
                      gl_FragColor = color;
                  }`;


          let uniforms = {
              uTime: 0,
              redSlider: 1.0,
              blueSlider: 1.0,
              greenSlider: 1.0,
              sinSlider: 0,
              tanSlider: 0,
              absSlider: 0.5,
              freqSlider: 1
          };

          const slide = function(event){

              if(event.target.matches('.red')){
                  uniforms.redSlider = event.target.value;
              }
              if(event.target.matches('.green')){
                  uniforms.greenSlider = event.target.value;
              }
              if(event.target.matches('.blue')){
                  uniforms.blueSlider = event.target.value;
              }
              if(event.target.matches('.sin')){
                  uniforms.sinSlider = event.target.value;
              }
              if(event.target.matches('.abs')){
                  uniforms.absSlider = event.target.value;
              }
              if(event.target.matches('.freq')){
                  uniforms.freqSlider = event.target.value;
              }
              if(event.target.matches('.tan')){
                  uniforms.tanSlider = event.target.value;
              }
          };


          const myFilter = new PIXI.Filter(vShader, fShader, uniforms);

          const texture = PIXI.Texture.from('https://cdn.glitch.com/4dd0b763-d029-4fb7-9d05-a13adddc61f2%2Fhusky_copy.png?v=1568561412816');
          const husky = new PIXI.Sprite(texture);

          husky.x = app.renderer.width / 2;
          husky.y = app.renderer.height / 2;
          husky.anchor.x = 0.5;
          husky.anchor.y = 0.5;
          husky.filters = [myFilter];

          app.stage.addChild(husky);
          app.ticker.add(animate);

          // This function is not attached to a const to define it at the top of the script
          function animate() {
              uniforms.uTime += (0.005 * (uniforms.freqSlider + 5));
              husky.angle += 1;
          }

          // Event listner
          sliders.forEach(slider => slider.addEventListener('input', slide));
        </script>
        <script type="text/javascript">
          
        </script>
        
        </div>
    </div>
  <br>
  <a href="/users/logout" class="btn btn-secondary">Logout</a>

</body>

